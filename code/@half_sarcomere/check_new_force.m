function check_new_force(obj,new_length)
% Function calculates the force for a given length

delta_hs_length = new_length - obj.hs_length;

if (startsWith(obj.kinetic_scheme, '2state'))
    bin_pops = obj.myofilaments.y(1+(1:obj.myofilaments.no_of_x_bins));
    temp_cb_force = ...
            obj.parameters.cb_number_density * obj.parameters.k_cb * 1e-9 * ...
            sum(bin_pops' .* ...
                (obj.myofilaments.x + obj.parameters.x_ps + ...
                    (obj.parameters.compliance_factor * delta_hs_length)));

    delta_cb_force = temp_cb_force - obj.cb_force;
end

if (startsWith(obj.kinetic_scheme, '3state_with_SRX'))
    bin_pops = obj.myofilaments.y(2+(1:obj.myofilaments.no_of_x_bins));
    temp_cb_force = ...
            obj.parameters.cb_number_density * obj.parameters.k_cb * 1e-9 * ...
            sum(bin_pops' .* ...
                (obj.myofilaments.x + obj.parameters.x_ps + ...
                    (obj.parameters.compliance_factor * delta_hs_length)));

    delta_cb_force = temp_cb_force - obj.cb_force;
end

if (startsWith(obj.kinetic_scheme, '4state_with_SRX'))
    M3_indices = 2+(1:obj.myofilaments.no_of_x_bins);
    M4_indices = (2+obj.myofilaments.no_of_x_bins) + ...
        (1:obj.myofilaments.no_of_x_bins);

    temp_cb_force = ...
            obj.parameters.cb_number_density * obj.parameters.k_cb * 1e-9 * ...
            (sum(obj.myofilaments.y(M3_indices)' .* ...
                (obj.myofilaments.x + ...
                    (obj.parameters.compliance_factor * delta_hs_length))) + ...
             sum(obj.myofilaments.y(M4_indices)' .* ...
                (obj.myofilaments.x + obj.parameters.x_ps + ...
                    (obj.parameters.compliance_factor * delta_hs_length))));

    delta_cb_force = temp_cb_force - obj.cb_force;        
end

delta_passive_force = obj.return_passive_force(new_length) - ...
    obj.return_passive_force(obj.hs_length);

obj.check_force = obj.hs_force + delta_cb_force + delta_passive_force;